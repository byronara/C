int countChars(char *x); // Instead of strlen
char stringCat(char *x, char *b, char *c); // Instead of strcat
bool stringCompare(char *x, char *b); // Instead of strcmp

int main()
{
    char s[] = "Hello. My name is John";
    char x[] = " And i am a cool Developer";
    char t[] = "Hello Dear";
    char b[] = "Hello Dear";
    char result[100];

    printf("The character count on the string are %d.\n", countChars(s));

    if(stringCompare(t,b) == 1)
    {
        printf ("The string Compare is True and they are identical!!\n");
    }
    else
    {
        printf("The string Compare is False and they are not the same.\n");
    }
    stringCat(result,s,x);
    return 0;
}


int countChars(char *x)
{
    int i = 0;
    int count = 0;

    for(i = 0; x[i] != '\0'; i++)
    {
        count++;
    }
    return count;
}

char stringCat(char *res, char *b, char *c)
{
    int i = 0;
    int count1 = countChars(b);
    int count2 = countChars(c);
    int keepTrack = 0;
    for(i = 0; b[i] != '\0'; i++)
    {
        //if (b[i] != '\0')
        //{
            res[i] = b[i];
            keepTrack++;
        //}
    }
    for(i = 0; c[i] != '\0'; i++)
    {
        //if (c[i] != '\0')
        //{
            res[keepTrack] = c[i];
            keepTrack++;
        //}
    }
    res[keepTrack] = '\0';

    printf("The string Cat function result is : \n%s", res);
    return 0;
}

bool stringCompare(char *x, char *b)
{
    int i = 0;

    while (x[i] != '\0' || b[i] != '\0')
    {
        if (x[i] != b[i])
        {
            return false;
        }
        i++;
    }
    return true;
}
